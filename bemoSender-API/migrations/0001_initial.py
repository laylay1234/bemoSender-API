# Generated by Django 3.2.8 on 2022-02-21 15:53

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import guardian.mixins
import uuid
import bemoSenderr.models.partner.base


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Autogenerated UUID.', primary_key=True, serialize=False, unique=True, verbose_name='Internal UUID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp automatically generated upon creation of the object.', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Automatically updated to the last modification timestamp.', verbose_name='Updated at')),
                ('_version', models.CharField(blank=True, help_text='Datatstore version used in mutations', max_length=255, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['updated_at'],
                'abstract': False,
            },
            bases=(models.Model, guardian.mixins.GuardianUserMixin),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CollectTransaction',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Autogenerated UUID.', primary_key=True, serialize=False, unique=True, verbose_name='Internal UUID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp automatically generated upon creation of the object.', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Automatically updated to the last modification timestamp.', verbose_name='Updated at')),
                ('_version', models.CharField(blank=True, help_text='Datatstore version used in mutations', max_length=255, null=True)),
                ('status', models.CharField(choices=[('NEW', 'New'), ('IN_PROGRESS', 'Operation in progress'), ('REVERTED', 'Operation reverted'), ('FAILED', 'Operation failed'), ('COMPLETED', 'Operation succesful')], max_length=255)),
                ('partner_response', models.JSONField(blank=True, null=True, verbose_name='Partner API response')),
                ('partner_response_formatted', models.JSONField(blank=True, null=True, verbose_name='Contains specific element from the partner response in a format that we expect')),
                ('collect_code', models.CharField(blank=True, max_length=255, null=True, verbose_name='The transaction code')),
                ('exchange_rate_snapshot', models.JSONField(blank=True, help_text='Exchange rate snapshot', null=True)),
            ],
            options={
                'ordering': ['-updated_at'],
                'abstract': False,
            },
            bases=(models.Model, bemoSenderr.models.partner.base.AbstractCollectPartner),
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Autogenerated UUID.', primary_key=True, serialize=False, unique=True, verbose_name='Internal UUID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp automatically generated upon creation of the object.', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Automatically updated to the last modification timestamp.', verbose_name='Updated at')),
                ('_version', models.CharField(blank=True, help_text='Datatstore version used in mutations', max_length=255, null=True)),
                ('iso_code', models.CharField(help_text='ISO Code of this country', max_length=2, verbose_name='Country ISO Code')),
                ('name', models.CharField(help_text='Country name', max_length=64, verbose_name='Country Name')),
                ('enabled_as_origin', models.BooleanField(help_text='Enabled as origin country')),
                ('enabled_as_destination', models.BooleanField(help_text='Enabled as destination country')),
                ('active', models.BooleanField()),
                ('calling_code', models.PositiveIntegerField(help_text='Country phone code', validators=[django.core.validators.MaxValueValidator(9999)])),
            ],
            options={
                'verbose_name_plural': 'Countries',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Autogenerated UUID.', primary_key=True, serialize=False, unique=True, verbose_name='Internal UUID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp automatically generated upon creation of the object.', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Automatically updated to the last modification timestamp.', verbose_name='Updated at')),
                ('_version', models.CharField(blank=True, help_text='Datatstore version used in mutations', max_length=255, null=True)),
                ('sign', models.CharField(help_text='sign of the currency ex. CAD', max_length=3, verbose_name="Currency's sign")),
                ('name', models.CharField(help_text='Name of the currency', max_length=255, verbose_name='Currency Name')),
                ('short_sign', models.CharField(help_text='Short sign of the currency ex. $', max_length=255, verbose_name="Currency's short sign")),
                ('iso_code', models.CharField(help_text='ISO Code of this currency', max_length=4, verbose_name='Currency ISO Code')),
            ],
            options={
                'verbose_name_plural': 'Currencies',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='FundingTransaction',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Autogenerated UUID.', primary_key=True, serialize=False, unique=True, verbose_name='Internal UUID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp automatically generated upon creation of the object.', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Automatically updated to the last modification timestamp.', verbose_name='Updated at')),
                ('_version', models.CharField(blank=True, help_text='Datatstore version used in mutations', max_length=255, null=True)),
                ('status', models.CharField(choices=[('NEW', 'New'), ('IN_PROGRESS', 'Operation in progress'), ('REVERTED', 'Operation reverted'), ('FAILED', 'Operation failed'), ('COMPLETED', 'Operation succesful')], max_length=255)),
                ('partner_response', models.JSONField(blank=True, null=True, verbose_name='Partner API response')),
                ('partner_response_formatted', models.JSONField(blank=True, null=True, verbose_name='Contains specific element from the partner response in a format that we expect')),
                ('reference_code', models.CharField(blank=True, max_length=255, null=True, verbose_name='Deposit reference number')),
            ],
            options={
                'ordering': ['-updated_at'],
                'abstract': False,
            },
            bases=(models.Model, bemoSenderr.models.partner.base.AbstractFundingPartner),
        ),
        migrations.CreateModel(
            name='Partner',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Autogenerated UUID.', primary_key=True, serialize=False, unique=True, verbose_name='Internal UUID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp automatically generated upon creation of the object.', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Automatically updated to the last modification timestamp.', verbose_name='Updated at')),
                ('_version', models.CharField(blank=True, help_text='Datatstore version used in mutations', max_length=255, null=True)),
                ('display_name', models.CharField(help_text='The name of the partner to be displayed', max_length=64, verbose_name="Partner's display name")),
                ('name', models.CharField(help_text='The PartnerTransaction name', max_length=255, verbose_name="Partner's Name")),
                ('contact_full_name', models.CharField(help_text='First and last name of the Partner', max_length=64, verbose_name='Partner Contact Full Name')),
                ('contact_email', models.EmailField(help_text='Email of the Partner', max_length=254, verbose_name='Partner Contact Email')),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('FAILED', 'Failed'), ('DISABLED', 'Disabled')], default='ACTIVE', help_text='Partner status', max_length=8, verbose_name='Status')),
                ('api_config', models.JSONField(default=dict, help_text='The configuration to consume the API of the Partner', verbose_name='Configuration')),
                ('type', models.CharField(choices=[('FUNDING', 'Funding'), ('COLLECT', 'Collect'), ('VERIFICATION', 'Verification'), ('CONVERSION', 'Conversion')], help_text='Partner type', max_length=16, verbose_name='Type')),
                ('api_call_type', models.CharField(choices=[('OUTBOUND', 'Outbound API call'), ('INBOUND', 'Inbound API call')], max_length=255, verbose_name='Partner API call type')),
            ],
            options={
                'ordering': ['updated_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PeriodicTasksEntry',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Autogenerated UUID.', primary_key=True, serialize=False, unique=True, verbose_name='Internal UUID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp automatically generated upon creation of the object.', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Automatically updated to the last modification timestamp.', verbose_name='Updated at')),
                ('_version', models.CharField(blank=True, help_text='Datatstore version used in mutations', max_length=255, null=True)),
                ('key', models.CharField(blank=True, max_length=255, null=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('task', models.CharField(blank=True, max_length=255, null=True)),
                ('enabled', models.BooleanField(default=True)),
                ('schedule', models.IntegerField(default=10)),
                ('args', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Periodic Tasks Entry',
                'verbose_name_plural': 'Periodic Tasks Entries',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='TransactionMethod',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Autogenerated UUID.', primary_key=True, serialize=False, unique=True, verbose_name='Internal UUID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp automatically generated upon creation of the object.', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Automatically updated to the last modification timestamp.', verbose_name='Updated at')),
                ('_version', models.CharField(blank=True, help_text='Datatstore version used in mutations', max_length=255, null=True)),
                ('name', models.CharField(max_length=255, verbose_name='Delivery method name')),
                ('type', models.CharField(choices=[('FUNDING', 'Funding'), ('COLLECT', 'Collect')], max_length=255, verbose_name='Transaction method type')),
            ],
            options={
                'ordering': ['updated_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserTask',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Autogenerated UUID.', primary_key=True, serialize=False, unique=True, verbose_name='Internal UUID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp automatically generated upon creation of the object.', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Automatically updated to the last modification timestamp.', verbose_name='Updated at')),
                ('_version', models.CharField(blank=True, help_text='Datatstore version used in mutations', max_length=255, null=True)),
                ('task_id', models.UUIDField(default=uuid.uuid4, help_text='Task ID.', unique=True, verbose_name='Task ID')),
                ('operation', models.CharField(blank=True, help_text='The name of the operation.', max_length=255, verbose_name='Operation Name')),
                ('version', models.IntegerField(blank=True, help_text='Conflict management.', verbose_name='Version')),
                ('arguments', models.JSONField(blank=True, default=dict, help_text='JSON object of arguments.', null=True, verbose_name='Arguments')),
                ('results', models.JSONField(blank=True, default=dict, help_text='Results.', null=True, verbose_name='Results ')),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Disabled'), ('DELETED', 'Deleted'), ('COMPLETED', 'Completed')], default='ACTIVE', help_text='You can soft delete objects by setting their status to deleted.', max_length=16, verbose_name='UserTask Status')),
            ],
            options={
                'verbose_name': 'User Task',
                'verbose_name_plural': 'User Tasks',
                'ordering': ['operation'],
            },
        ),
        migrations.CreateModel(
            name='UserTier',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Autogenerated UUID.', primary_key=True, serialize=False, unique=True, verbose_name='Internal UUID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp automatically generated upon creation of the object.', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Automatically updated to the last modification timestamp.', verbose_name='Updated at')),
                ('_version', models.CharField(blank=True, help_text='Datatstore version used in mutations', max_length=255, null=True)),
                ('level', models.CharField(help_text='the user tier level', max_length=255)),
                ('tx_max', models.CharField(help_text='the maximum amount to send in a transaction for this level', max_length=255)),
                ('monthly_max', models.CharField(help_text='The maximum number of transactions and amount per month', max_length=255)),
                ('quarterly_max', models.CharField(help_text='The maximum number of transactions and amount per 3 months', max_length=255)),
                ('yearly_max', models.CharField(help_text='The maximum number of transactions and amount per year', max_length=255)),
            ],
            options={
                'ordering': ['updated_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserBankVerificationRequest',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Autogenerated UUID.', primary_key=True, serialize=False, unique=True, verbose_name='Internal UUID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp automatically generated upon creation of the object.', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Automatically updated to the last modification timestamp.', verbose_name='Updated at')),
                ('_version', models.CharField(blank=True, help_text='Datatstore version used in mutations', max_length=255, null=True)),
                ('status', models.CharField(blank=True, choices=[('NOT_VERIFIED', 'Not Verified'), ('VERIFIED', 'Verified')], max_length=255, null=True, verbose_name='User verification status')),
                ('user_snapshot', models.JSONField(default=dict, verbose_name='User data')),
                ('partner_response', models.JSONField(verbose_name='Partner API response')),
                ('partner_parameters', models.JSONField(blank=True, help_text='account_id and frontend_request_id', null=True)),
                ('partner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='bemoSenderr.partner')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-updated_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TransactionMethodAvailability',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Autogenerated UUID.', primary_key=True, serialize=False, unique=True, verbose_name='Internal UUID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp automatically generated upon creation of the object.', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Automatically updated to the last modification timestamp.', verbose_name='Updated at')),
                ('_version', models.CharField(blank=True, help_text='Datatstore version used in mutations', max_length=255, null=True)),
                ('active', models.BooleanField(help_text='Transaction method availability')),
                ('api_code', models.IntegerField(help_text='The api code of this transaction method')),
                ('condition', models.JSONField(blank=True, null=True, verbose_name='Condition on the active payer')),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bemoSenderr.partner')),
                ('partner_method', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bemoSenderr.transactionmethod')),
            ],
            options={
                'verbose_name_plural': 'Transaction Methods Availabilities',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='PartnerSettlementAccount',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Autogenerated UUID.', primary_key=True, serialize=False, unique=True, verbose_name='Internal UUID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp automatically generated upon creation of the object.', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Automatically updated to the last modification timestamp.', verbose_name='Updated at')),
                ('_version', models.CharField(blank=True, help_text='Datatstore version used in mutations', max_length=255, null=True)),
                ('active', models.BooleanField(help_text='Status of the this account')),
                ('is_primary_account', models.BooleanField()),
                ('account_number', models.CharField(help_text='The account number of this account', max_length=255)),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='bemoSenderr.currency')),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='bemoSenderr.partner')),
            ],
            options={
                'ordering': ['updated_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PartnerPayer',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Autogenerated UUID.', primary_key=True, serialize=False, unique=True, verbose_name='Internal UUID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp automatically generated upon creation of the object.', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Automatically updated to the last modification timestamp.', verbose_name='Updated at')),
                ('_version', models.CharField(blank=True, help_text='Datatstore version used in mutations', max_length=255, null=True)),
                ('name', models.CharField(max_length=255, verbose_name="Partner's payer name")),
                ('code', models.IntegerField(help_text="The partner's payer code")),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='bemoSenderr.partner')),
            ],
            options={
                'ordering': ['updated_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PartnerExchangeRate',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Autogenerated UUID.', primary_key=True, serialize=False, unique=True, verbose_name='Internal UUID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp automatically generated upon creation of the object.', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Automatically updated to the last modification timestamp.', verbose_name='Updated at')),
                ('_version', models.CharField(blank=True, help_text='Datatstore version used in mutations', max_length=255, null=True)),
                ('reference_rate', models.CharField(help_text='Exchange rate from currency origin to currency destination', max_length=255)),
                ('settlement_to_destination_rate', models.CharField(help_text='Exchange rate from ActivePartnerSettlementCurrency to destination currency', max_length=255)),
                ('fee', models.CharField(help_text='The rate fee', max_length=255)),
                ('origin_to_settlement_rate', models.CharField(help_text='Exhange rate from origin currency to ActivePartnerSettlementCurrency', max_length=255)),
                ('cost_price', models.CharField(help_text='Applicable exchange rate of the partner', max_length=255)),
                ('commission_percentage', models.CharField(help_text='Sales commission per transaction for this partner', max_length=255)),
                ('commission_fixed', models.CharField(help_text='Sales commission per transaction for this partner', max_length=255)),
                ('sales_percentage', models.CharField(help_text='The percentage of transactions on the partner network', max_length=255)),
                ('query_response', models.JSONField(blank=True, null=True)),
                ('country_destination', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='rate_country_destination', to='bemoSenderr.country')),
                ('country_origin', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='rate_country_origin', to='bemoSenderr.country')),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='bemoSenderr.partner')),
                ('settlement_currency', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='bemoSenderr.currency')),
            ],
            options={
                'ordering': ['updated_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PartnerBalance',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Autogenerated UUID.', primary_key=True, serialize=False, unique=True, verbose_name='Internal UUID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp automatically generated upon creation of the object.', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Automatically updated to the last modification timestamp.', verbose_name='Updated at')),
                ('_version', models.CharField(blank=True, help_text='Datatstore version used in mutations', max_length=255, null=True)),
                ('key', models.CharField(help_text='Probably the account name', max_length=64, verbose_name='Key')),
                ('balance', models.DecimalField(decimal_places=2, help_text='The calculated balance for the given account.', max_digits=30, verbose_name='Balance')),
                ('partner', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='bemoSenderr.partner')),
            ],
            options={
                'ordering': ['updated_at'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='partner',
            name='active_payer',
            field=models.ForeignKey(blank=True, help_text='The active payer', null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='active_payer', to='bemoSenderr.partnerpayer'),
        ),
        migrations.AddField(
            model_name='partner',
            name='api_user',
            field=models.ForeignKey(blank=True, help_text='Associated API user', null=True, on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='partner',
            name='country',
            field=models.ForeignKey(help_text='The country of the Partner', on_delete=django.db.models.deletion.RESTRICT, to='bemoSenderr.country'),
        ),
        migrations.AddField(
            model_name='partner',
            name='currency',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='bemoSenderr.currency'),
        ),
        migrations.CreateModel(
            name='KycVerificationRequest',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Autogenerated UUID.', primary_key=True, serialize=False, unique=True, verbose_name='Internal UUID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp automatically generated upon creation of the object.', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Automatically updated to the last modification timestamp.', verbose_name='Updated at')),
                ('_version', models.CharField(blank=True, help_text='Datatstore version used in mutations', max_length=255, null=True)),
                ('status', models.CharField(blank=True, choices=[('NOT_VERIFIED', 'Not Verified'), ('VERIFIED', 'Verified')], max_length=255, null=True, verbose_name='User verification status')),
                ('user_snapshot', models.JSONField(default=dict, verbose_name='User data')),
                ('partner_response', models.JSONField(verbose_name='Partner API response')),
                ('query_counter', models.CharField(help_text='Current verification request counter', max_length=255)),
                ('custom_transaction_id', models.CharField(help_text='An internally created transaction ID', max_length=255)),
                ('partner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='bemoSenderr.partner')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-updated_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GlobalTransaction',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Autogenerated UUID.', primary_key=True, serialize=False, unique=True, verbose_name='Internal UUID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp automatically generated upon creation of the object.', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Automatically updated to the last modification timestamp.', verbose_name='Updated at')),
                ('_version', models.CharField(blank=True, help_text='Datatstore version used in mutations', max_length=255, null=True)),
                ('status', models.CharField(choices=[('NEW', 'New'), ('FUNDTRANSACTION_IN_PROGRESS', 'Fund transaction in progress'), ('COLLECTTRANSACTION_IN_PROGRESS', 'Collect transaction in progress'), ('REFUNDTRANSACTION_IN_PROGRESS', 'Refund transaction in progress'), ('SUCCESS', 'Transaction completed successfully'), ('CANCELED', 'Transaction canceled'), ('MANUAL_INTERVENTION_NEEDED', 'Intervention needed from an agent')], default='NEW', help_text='Global Transaction status', max_length=64, verbose_name='Status')),
                ('receiver_snapshot', models.JSONField(blank=True, default=dict, null=True, verbose_name='Recipient Information')),
                ('user_snapshot', models.JSONField(default=dict, verbose_name='User Information including the IP address')),
                ('parameters', models.JSONField(default=dict, verbose_name='Countries , Amounts, Reason of Transfer, Currencies, Total, and deliveryMethodFee')),
                ('exchange_rate_tier_snapshot', models.JSONField(default=dict, verbose_name='partnerRate, rateFee, rateFx, refRate, commissionPartner, exchangeRate, commissionYxf')),
                ('invoice_number', models.CharField(blank=True, max_length=255, null=True, verbose_name='The invoice number')),
                ('notifications', models.JSONField(blank=True, null=True, verbose_name='SMS notifications status')),
                ('payment_date', models.DateTimeField(blank=True, null=True, verbose_name='The payment date')),
                ('funding_method', models.CharField(max_length=255, verbose_name='Funding method of the user')),
                ('collect_method', models.CharField(max_length=255, verbose_name='cHollect method of the user')),
                ('revenue', models.CharField(blank=True, max_length=255, null=True, verbose_name='The revenue from this transaction')),
                ('collect_transactions', models.ManyToManyField(blank=True, null=True, to='bemoSenderr.CollectTransaction')),
                ('funding_transaction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='bemoSenderr.fundingtransaction')),
                ('user', models.ForeignKey(blank=True, help_text='Associated user', null=True, on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Global Transaction',
                'verbose_name_plural': 'Global Transactions',
                'ordering': ['created_at'],
            },
        ),
        migrations.AddField(
            model_name='fundingtransaction',
            name='partner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='bemoSenderr.partner'),
        ),
        migrations.CreateModel(
            name='ExchangeRateTier',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Autogenerated UUID.', primary_key=True, serialize=False, unique=True, verbose_name='Internal UUID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp automatically generated upon creation of the object.', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Automatically updated to the last modification timestamp.', verbose_name='Updated at')),
                ('_version', models.CharField(blank=True, help_text='Datatstore version used in mutations', max_length=255, null=True)),
                ('bottom_amount', models.PositiveIntegerField(help_text='Minimum value of this rate tier')),
                ('distribution_percentage', models.CharField(help_text='The percentage of transactions in this rate tier', max_length=255)),
                ('profit_margin_percentage', models.CharField(help_text='Sales commission per transaction for bemoSenderr', max_length=255)),
                ('applicable_rate', models.CharField(help_text='calculataed exchange rate available to the client based on ratetier level', max_length=255)),
                ('collect_transaction_method_fees', models.JSONField(help_text='Fees related to the delivery method')),
                ('country_destination', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='rate_tier_country_destination', to='bemoSenderr.country')),
                ('country_origin', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='rate_tier_country_origin', to='bemoSenderr.country')),
            ],
            options={
                'ordering': ['updated_at'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='country',
            name='default_currency',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='bemoSenderr.currency'),
        ),
        migrations.AddField(
            model_name='collecttransaction',
            name='partner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='bemoSenderr.partner'),
        ),
        migrations.AddField(
            model_name='collecttransaction',
            name='partner_settlement_currency',
            field=models.ForeignKey(blank=True, help_text='The currency of the partner settlement account', null=True, on_delete=django.db.models.deletion.RESTRICT, to='bemoSenderr.partnersettlementaccount'),
        ),
    ]
