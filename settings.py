"""
Django settings for bemoSenderr project.

Generated by 'django-admin startproject' using Django 2.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""
import json
import logging
import os
import ssl
import sys
# from datetime import timedelta
from distutils.util import strtobool
from urllib import request

import boto3
from aws_xray_sdk.core import xray_recorder
from django.utils.translation import ugettext_lazy as _

# xray_recorder.begin_segment("settings")

os.environ.setdefault('PYCHARM_DJANGO_MANAGE_MODULE', 'manage')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

AUTH_USER_MODEL = 'bemoSenderr.User'

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

AWS_ACCOUNT = os.environ.get('AWS_ACCOUNT', None)
AWS_REGION = os.environ.get('AWS_REGION', 'us-west-1')

# Configure the AWS environment

ENV = os.environ.get('ENV', None)
CONFIG = {'env': ENV}
CONFIG['debug'] = False

if ENV is None:
    print('No ENV set')
    sys.exit(1)
else:
    print('ENV is ' + ENV)

KEY = os.environ.get('KEY', ENV)

try:
    CONFIG['account'] = AWS_ACCOUNT
    CONFIG['region'] = AWS_REGION
    path = "/{0}/".format(ENV)

    session = boto3.session.Session()
    client = session.client(
        service_name='ssm',
        region_name=CONFIG['region'],
    )
    print(path)
    response = client.get_parameters_by_path(
        Path=path,
        Recursive=True,
    )
    for param in response['Parameters']:
        CONFIG[param['Name'].replace(path, '')] = param['Value']

    while response.get('NextToken', None) is not None:
        response = client.get_parameters_by_path(
            Path=path,
            Recursive=True,
            NextToken=response['NextToken']
        )
        for param in response['Parameters']:
            CONFIG[param['Name'].replace(path, '')] = param['Value']

    CONFIG['db_ssl_ca'] = 'rds-ca-2019-root.pem'

    # SECURITY WARNING: don't run with debug turned on in production!
    # if distutils.util.strtobool(CONFIG['debug']) is True:
    #     DEBUG = True
    # else:
    #     DEBUG = False
    # DEBUG = bool(os.environ.get('DEBUG', CONFIG['debug']))
    # CONFIG['GRAPHQL_ENDPOINT'] = "https://cd3cpdufqfbw5pkmga5lfg46ge.appsync-api.us-west-1.amazonaws.com/graphql"
    CONFIG['APPSYNC_API_KEY'] = "da2-qxijc6tt3zf6ph6em2hk6imsrm"

except Exception as e:
    raise e

# finally:
#     if DEBUG:
#         print("AWS ENV was CONFIGured with the following values: {CONFIG}".format(CONFIG=CONFIG))
DEBUG = strtobool(os.environ.get('DEBUG', CONFIG['debug']))
print('DEBUG is ' + str(DEBUG))

COGNITO_AWS_REGION = AWS_REGION
"""
if ENV == "Dev-V3":
    COGNITO_USER_POOL = "us-west-1_258QPt8nn"
elif ENV == "Prod-V3":
    COGNITO_USER_POOL = "us-west-1_yUR9JyX97"
else:
"""
COGNITO_USER_POOL = CONFIG['COGNITO_USER_POOL']

# Provide this value if `id_token` is used for authentication (it contains 'aud' claim).
# `access_token` doesn't have it, in this case keep the COGNITO_AUDIENCE empty
COGNITO_AUDIENCE = None
COGNITO_POOL_URL = None  # will be set few lines of code later, if configuration provided

rsa_keys = {}
# To avoid circular imports, we keep this logic here.
# On django init we download jwks public keys which are used to validate jwt tokens.
# For now there is no rotation of keys (seems like in Cognito decided not to implement it)
if COGNITO_AWS_REGION and COGNITO_USER_POOL:
    COGNITO_POOL_URL = 'https://cognito-idp.{}.amazonaws.com/{}'.format(
        COGNITO_AWS_REGION, COGNITO_USER_POOL)
    pool_jwks_url = COGNITO_POOL_URL + '/.well-known/jwks.json'
    jwks = json.loads(request.urlopen(pool_jwks_url).read())
    rsa_keys = {key['kid']: json.dumps(key) for key in jwks['keys']}

JWT_AUTH = {
    'JWT_PAYLOAD_GET_USERNAME_HANDLER': 'bemoSenderr.utils.jwt.get_username_from_payload_handler',
    'JWT_DECODE_HANDLER': 'bemoSenderr.utils.jwt.cognito_jwt_decode_handler',
    'JWT_PUBLIC_KEY': rsa_keys,
    'JWT_ALGORITHM': 'RS256',
    'JWT_AUDIENCE': COGNITO_AUDIENCE,
    'JWT_ISSUER': COGNITO_POOL_URL,
    'JWT_AUTH_HEADER_PREFIX': 'Bearer',
}

CORS_ORIGIN_ALLOW_ALL = True
CACHALOT_ENABLED = False
CACHALOT_TIMEOUT = 0
CACHE_MIDDLEWARE_KEY_PREFIX = 'fpcache_' + KEY
CACHE_MIDDLEWARE_SECONDS = 0
DEFAULT_FROM_EMAIL = CONFIG['SMTP_SENDER']
# EMAIL_BACKEND = 'mail_panel.backend.MailToolbarBackend'
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
USE_X_FORWARDED_HOST = True
USE_X_FORWARDED_PORT = True
SESSION_COOKIE_SECURE = True
CSRF_TRUSTED_ORIGINS = [CONFIG['DOMAIN_ROOT'], "wks-stan.bemoSenderr.dev"]

# TODO: organize all these ifs to avoid confusion
if ENV == "Prod-V3":
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_HSTS_SECONDS = 3600

    # SECURE_SSL_REDIRECT = True
    SECURE_SSL_REDIRECT = False
    # CORS_ORIGIN_ALLOW_ALL = False
    # CORS_ORIGIN_WHITELIST = [
    #     "https://bemoSenderr.io",
    #     "https://app.bemoSenderr.io",
    #     "http://localhost:11050"  # stanny's ip
    # ]

    CACHALOT_ENABLED = True
    CACHALOT_TIMEOUT = 3600
    CACHE_MIDDLEWARE_SECONDS = 0
    # DEFAULT_FROM_EMAIL = 'no-reply@bemoSenderr.app'
    # EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

DB_DATABASE = os.environ.get('DB_DATABASE', None)
if DB_DATABASE is not None:
    CONFIG['DB_DATABASE'] = DB_DATABASE
DB_USER = os.environ.get('DB_USER', None)
if DB_USER is not None:
    CONFIG['DB_USER'] = DB_USER

if not (ENV == "Test-V3" or os.environ.get('BUILD', False) == "1"):
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": ["rediss://" + CONFIG['REDIS_HOST']],
            # "LOCATION": ["redis://" + CONFIG['cache_host'], "redis://" + CONFIG['cache_ro_host']],
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
                "PASSWORD": CONFIG['REDIS_AUTH']
            },
            "KEY_PREFIX": CONFIG['DB_DATABASE'] + '_' + KEY
        }
    }
    SECRET_KEY = CONFIG['SECRET_KEY']

else:
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
        }
    }
    CACHALOT_ENABLED = False
    SECRET_KEY = '787asd8a7sd88aasdsd908asd7asd98asd09d978as98asd'

# TODO: add slave
DATABASES = {
    'default': {
        'ENGINE': 'django_iam_dbauth.aws.mysql',
        'NAME': CONFIG['DB_DATABASE'],
        'USER': CONFIG['DB_USER'],
        'HOST': CONFIG['DB_HOSTWRITE'],
        'PORT': '3306',
        'ATOMIC_REQUESTS': True,
        'OPTIONS': {
            'ssl': {
                'MYSQL_OPT_SSL_CAPATH': 'rds-ca-2019-root.pem'
            },
            'sql_mode': 'TRADITIONAL',
            "use_iam_auth": True,
            'region': 'us-west-1',
            'charset': 'utf8mb4'
        },
        'TEST': {
            'CHARSET': 'utf8mb4',
            'COLLATION': 'utf8mb4_unicode_ci',
        }
    }
}

# CACHALOT_DATABASES = ['default']

# CACHALOT_UNCACHABLE_TABLES = ('django_migrations', 'bemoSenderr_value', 'django_session')

# CACHE_MIDDLEWARE_ALIAS = 'default'
SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'
SESSION_CACHE_ALIAS = 'default'

# Requires opendkim and full mta setup
EMAIL_HOST = CONFIG['SMTP_HOST']
EMAIL_PORT = 587

EMAIL_USE_TLS = True
EMAIL_HOST_USER = CONFIG['SMTP_USER']
EMAIL_HOST_PASSWORD = CONFIG['SMTP_PASSWORD']
SERVER_EMAIL = DEFAULT_FROM_EMAIL


def verified_callback(user):
    user.is_active = True


# For sending email verification
EMAIL_VERIFIED_CALLBACK = verified_callback
EMAIL_FROM_ADDRESS = DEFAULT_FROM_EMAIL
EMAIL_MAIL_SUBJECT = 'Confirm your email'
EMAIL_MAIL_HTML = 'email/email_template.html'
EMAIL_MAIL_PLAIN = 'email/email_template.txt'
EMAIL_TOKEN_LIFE = 60 * 60
EMAIL_PAGE_TEMPLATE = 'email/email_confirmation.html'
if ENV == "Dev-V3":
    EMAIL_PAGE_DOMAIN = 'https://bemoSenderr.dev/'
elif ENV == "Prod-V3":
    EMAIL_PAGE_DOMAIN = 'https://bemoSenderr.app/'
else:
    EMAIL_PAGE_DOMAIN = 'https://bemoSenderr.dev/'
print(EMAIL_PAGE_DOMAIN)

EMAIL_MULTI_USER = False  # optional (defaults to False)

# we use the DB so we can use the session store
MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    # 'djstripe',
    'corsheaders',
    'cachalot',
    'django_mysql',
    'django_filters',
    'jet.dashboard',
    'jet',
    'crispy_forms',
    'reversion',
    'django_json_widget',
    'modeltranslation',
    #    'oauth2_provider',
    'django.contrib.sites',
    'django.contrib.admin',
    'django.contrib.admindocs',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    # 'flexselect',
    'debug_toolbar',
    # 'compressor',
    'guardian',
    'rest_framework.authtoken',
    'rest_framework',
    # 'dj_rest_auth',
    # 'allauth',
    # 'allauth.account',
    # 'allauth.socialaccount',
    # 'dj_rest_auth.registration',
    # 'django_uwsgi',
    # 'mail_panel',
    'pympler',
    'requests_panel',
    'template_profiler_panel',
    # 'vcs_info_panel',
    'djangoql',
    'celery',
    'django_celery_results',
    'django_celery_beat',
    'sequences.apps.SequencesConfig',
    'bemoSenderr.apps.bemoSenderrConfig',
    'aws_xray_sdk.ext.django',
    'django_fsm',
    'fsm_admin',
    'pickles',
]

# GUARDIAN_MONKEY_PATCH = False

MIDDLEWARE = [
    'aws_xray_sdk.ext.django.middleware.XRayMiddleware',
    'bemoSenderr.middleware.SetRemoteAddrFromForwardedFor',
    'django.middleware.security.SecurityMiddleware',
    # 'django.middleware.cache.UpdateCacheMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.http.ConditionalGetMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.cache.FetchFromCacheMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.RemoteUserMiddleware',
    'django.contrib.admindocs.middleware.XViewMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'reversion.middleware.RevisionMiddleware',
]

ROOT_URLCONF = 'bemoSenderr.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

USE_ETAGS = True

DEFAULT_CHARSET = 'UTF-8'

# This needs nodejs and lessc: http://lesscss.org/
# COMPRESS_PRECOMPILERS = (('text/less', 'lessc {infile} {outfile}'),)
# NOT needed right now

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/public/'
STATIC_ROOT = './public/'

X_FRAME_OPTIONS = 'SAMEORIGIN'

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en'

LANGUAGES = [
    ('en', _('English')),
    ('fr', _('French')),
]
MODELTRANSLATION_LANGUAGES = ('en', 'fr')

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

INTERNAL_IPS = [
    # ...
    '127.0.0.1',
    # ...
]

# Flexselect settings.
# FLEXSELECT = {
#     'include_jquery': True,
# }

CRISPY_TEMPLATE_PACK = 'uni_form'

REST_FRAMEWORK = {
    'DEFAULT_VERSIONING_CLASS': 'bemoSenderr.versioning.bemoSenderrVersioning',
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
        'rest_framework.renderers.AdminRenderer',
    ],
    'DEFAULT_PAGINATION_CLASS': 'bemoSenderr.pagination.ResultSetPagination',
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        # 'rest_framework.authentication.TokenAuthentication',
        # 'rest_framework_simplejwt.authentication.JWTAuthentication',
        # 'dj_rest_auth.jwt_auth.JWTCookieAuthentication',
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        # 'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
    ),
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        # 'rest_framework.throttling.usernameRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '12/minute',
        # 'user': '3600/hour'
    },
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend',
                                'rest_framework.filters.SearchFilter', 'rest_framework.filters.OrderingFilter'],
    'EXCEPTION_HANDLER': 'bemoSenderr.exceptions.custom_exception_handler',
    #    'NON_FIELD_ERRORS_KEY': 'error',
    'PAGE_SIZE': 1000,
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
}

# REST_USE_JWT = True
# JWT_AUTH_COOKIE = 'JWT'

# SIMPLE_JWT = {
#     'AUTH_HEADER_TYPES': ('JWT', 'Bearer', 'Token'),
#     'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
#     'REFRESH_TOKEN_LIFETIME': timedelta(days=2),
# }

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.RemoteUserBackend',
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by e-mail
    # 'allauth.account.auth_backends.AuthenticationBackend',
    'guardian.backends.ObjectPermissionBackend',
]

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
LOGIN_REDIRECT_URL = '/#/overview'
LOGIN_URL = '/#/login'
ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'https'
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_LOGIN_ON_PASSWORD_RESET = True
ACCOUNT_LOGOUT_REDIRECT_URL = '/#/login'
OLD_PASSWORD_FIELD_ENABLED = True
LOGOUT_ON_PASSWORD_CHANGE = True

# REST_AUTH_REGISTER_SERIALIZERS = {'REGISTER_SERIALIZER': 'bemoSenderr.serializers.auth.bemoSenderrRegisterSerializer'}

# bemoSenderr.dev/o/application
# OAUTH2_PROVIDER = {
#     # this is the list of available scopes
#     'SCOPES': {'read': 'Read scope', 'write': 'Write scope', 'groups': 'Access to your groups'}
# }

SITE_ID = 3

DEBUG_TOOLBAR_PATCH_SETTINGS = False

DEBUG_TOOLBAR_PANELS = [
    'debug_toolbar.panels.versions.VersionsPanel',
    'debug_toolbar.panels.timer.TimerPanel',
    'debug_toolbar.panels.settings.SettingsPanel',
    'debug_toolbar.panels.headers.HeadersPanel',
    'debug_toolbar.panels.request.RequestPanel',
    'debug_toolbar.panels.sql.SQLPanel',
    'debug_toolbar.panels.staticfiles.StaticFilesPanel',
    'debug_toolbar.panels.templates.TemplatesPanel',
    'debug_toolbar.panels.cache.CachePanel',
    'debug_toolbar.panels.signals.SignalsPanel',
    'debug_toolbar.panels.logging.LoggingPanel',
    # 'debug_toolbar.panels.redirects.RedirectsPanel',
    # 'debug_toolbar.panels.profiling.ProfilingPanel',
    'cachalot.panels.CachalotPanel',
    # 'django_uwsgi.panels.UwsgiPanel',
    # 'mail_panel.panels.MailToolbarPanel',
    'pympler.panels.MemoryPanel',
    'requests_panel.panel.RequestsDebugPanel',
    "template_profiler_panel.panels.template.TemplateProfilerPanel",
    # 'vcs_info_panel.panels.GitInfoPanel',
]


# Override for when we really want to display the debug bar since its so slow
def show_toolbar(request):
    if bool(DEBUG) is True:
        return False
    else:
        return False


DEBUG_TOOLBAR_CONFIG = {
    'SHOW_TOOLBAR_CALLBACK': show_toolbar,
    'SHOW_COLLAPSED': False
}

WSGI_APPLICATION = 'wsgi.application'

# TODO: debug why this was screwing up and had to be disabled
CORS_ORIGIN_ALLOW_ALL = True

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'filters': {
        'special': {
            '()': 'bemoSenderr.logger.IgnoreFilter',
            'types': ['PermissionError'],
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'filters': ['special']
        }
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'propagate': True,
        },
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
        'bemoSenderr.custom': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        }
    }
}

# a tuple of strings
plugins = ('elasticbeanstalk_plugin', 'ec2_plugin')

xray_recorder.configure(plugins=plugins)
logging.getLogger('aws_xray_sdk').setLevel(logging.WARNING)

XRAY_RECORDER = {
    'AWS_XRAY_TRACING_NAME': '{0}-{1}-bemoSenderr-Backend'.format(KEY, ENV),
    'PATCH_MODULES': [
        'boto3',
        'requests',
        # 'bemoSenderr.views',
    ],
    'AWS_XRAY_CONTEXT_MISSING': 'LOG_ERROR',
    'SAMPLING': False,
    'AUTO_INSTRUMENT': True,
}

# xray_recorder.end_segment("settings")
CELERY_BROKER_URL = "rediss://:" + str(CONFIG["REDIS_AUTH"]) + "@" + str(CONFIG["REDIS_HOST"] + ":6379/0?ssl_cert_reqs=none")
CELERY_BEAT_SCHEDULER = 'redbeat.RedBeatScheduler'
CELERY_WORKER_SEND_TASK_EVENTS = True
CELERY_RESULT_PERSISTENT = True
CELERY_RESULT_EXPIRES = 3600
CELERY_REDIS_BACKEND_USE_SSL = {'ssl_cert_reqs': ssl.CERT_NONE}
CELERY_ACCEPT_CONTENT = ['pickle', 'json']
CELERY_RESULT_BACKEND = "rediss://:" + str(CONFIG["REDIS_AUTH"]) + "@" + str(CONFIG["REDIS_HOST"] + ":6379/0?ssl_cert_reqs=none")
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_SEND_SENT_EVENT = True
CELERY_SEND_EVENTS = True
CELERY_EAGER_PROPAGATES_EXCEPTIONS = True
CELERY_WORKER_TIME_LIMIT = 1000
CELERY_TASK_ROUTES = {
    "bemoSenderr.models.partner.bank_verification.verify": {'queue': 'verification'},
    "bemoSenderr.models.partner.base.ping": {'queue': 'send_money'},
    "bemoSenderr.models.partner.currconv.get_rates": {'queue': 'periodic_tasks'},
    "bemoSenderr.models.partner.kyc_verification.verify": {'queue': 'verification'},
    "bemoSenderr.models.partner.transactions.cancel": {'queue': 'send_money'},
    "bemoSenderr.models.partner.transactions.check_collect_status": {'queue': 'periodic_tasks'},
    "bemoSenderr.models.partner.transactions.collect": {'queue': 'send_money'},
    "bemoSenderr.operations.collect_transactions": {'queue': 'send_money'},
    "bemoSenderr.operations.fund_transaction": {'queue': 'send_money'},
    "bemoSenderr.tasks.add": {'queue': 'periodic_tasks'},
    "bemoSenderr.tasks.authorize_deposits": {'queue': 'periodic_tasks'},
    "bemoSenderr.tasks.update_pending_sign_up_flinks": {'queue': 'verification'},
    "bemoSenderr.tasks.check_deposits": {'queue': 'periodic_tasks'},
    "bemoSenderr.tasks.check_refunds": {'queue': 'periodic_tasks'},
    "bemoSenderr.tasks.get_interac_emails": {'queue': 'invoices'},
    "bemoSenderr.tasks.send_invoice_task": {'queue': 'invoices'},
    "bemoSenderr.tasks.update_rates": {'queue': 'periodic_tasks'},
    "bemoSenderr.tasks.user_bank_verify": {'queue': 'verification'},
    "bemoSenderr.models.partner.transactions.check_funding_inactivity": {'queue': 'periodic_tasks'}
}

FLINKS_CA_BASE_URL = CONFIG['FLINKS_CA_BASE_URL']
FLINKS_US_BASE_URL = CONFIG['FLINKS_US_BASE_URL']
